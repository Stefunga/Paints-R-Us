from tkinter import *
import tkinter as tk
import tkinter.messagebox
import sqlite3
import time
import datetime

#Connecting to Paints-R-Us Database
connection = sqlite3.connect('PaintsRUs.db')
cursor = connection.cursor()

#Initially creating the database && ADDITIONS TO PaintsRUs.db
#cursor.execute('CREATE TABLE Employee (Id INTEGER PRIMARY KEY, Name TEXT, Password TEXT)')
#Inserts new row into Employee table
#cursor.execute('INSERT INTO Employee (Name, Password) VALUES ("Mike", "Hull")')
#cursor.execute('INSERT INTO Employee (Name, Password) VALUES ("a", "1")')
#Selecting all values from the table
#cursor.execute('SELECT * FROM EMPLOYEE')
#cursor.execute('CREATE TABLE Customer (Id INTEGER PRIMARY KEY, First_Name TEXT, Last_Name TEXT)')
#cursor.execute('INSERT INTO Customer (First_Name, Last_Name) VALUES ("Tom", "Hull")')
#cursor.execute('INSERT INTO Customer (First_Name, Last_Name) VALUES ("Tom", "Hull")')
#Finalizes all changes made to the database permanently
#cursor.execute
#cursor.execute('ALTER TABLE Customer ADD Balance DOUBLE')
#connection.commit()
#How to print retrieved info
#print(cursor.fetchall())

#Main class/UI for software
class PaintsMain:

    currentEmployee = -1
    currentCustomer = -1
    #Generates main login Screen when program starts
    def __init__(self, master):

        #When submit button is clicked, Username and Password values are retrieved from 'PaintsRUs.db' to see if they exist
        def submit(event):
            time.sleep(.1)
            usernameValue = str(username.get())
            passwordValue = str(password.get())
            cursor.execute('SELECT * FROM EMPLOYEE WHERE Name = "' + usernameValue + '" AND Password = "' + passwordValue + '"')
            result = cursor.fetchall()
            if(str(result) == '[]'):#If user not found, error window appears
                tkinter.messagebox.showerror('Sign In Error', 'Incorrect Username or Password, Please try again')
            else:#If user found, the login frame is removed and the main frame is loaded
                PaintsMain.currentEmployee = int(result[0][0])
                time.sleep(.3)
                loginFrame.destroy()
                PaintsMain.menuScreen(master, usernameValue)

        # Building loginScreen Components
        loginFrame = Frame(master, width = 300, height = 200, bg="gray")
        loginFrame.pack(pady=25)
        loginFrame.pack_propagate(0)
        signLabel = Label(loginFrame, text="Welcome to Paints-R-Us, Please Sign In!", bg="gray")
        nameLabel = Label(loginFrame, text="Username", bg="gray")
        passLabel = Label(loginFrame, text="Password", bg="gray")
        username = StringVar()
        nameEntry = Entry(loginFrame, textvariable = username, bg="darkgray")
        password = StringVar()
        passEntry = Entry(loginFrame, textvariable = password, bg="darkgray")
        passEntry.config(show="*");
        loginButton = Button(loginFrame, text="Login")
        loginButton.bind("<Button-1>", submit)
        master.bind("<Return>", submit)
        signLabel.grid(row=0, columnspan = 2, pady=10)
        nameLabel.grid(row=1, sticky=E)
        passLabel.grid(row=2, sticky=E)
        nameEntry.grid(row=1, column=1)
        passEntry.grid(row=2, column=1)
        loginButton.grid(row=3, columnspan = 2, pady=10)

    #Main menu Screen for employees
    def menuScreen(master, who):
        #When button is pressed, takes the value from the listbox and goes to the appropriate screen
        def goToPage(event):
            currentGo = menuList.get(menuList.curselection())
            master.unbind("<Return>")
            if(str(currentGo)=="Lookup Customer"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.customerLookupScreen(master)
            elif(str(currentGo) == "Add New Customer"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.newCustomerScreen(master)
            elif(str(currentGo) == "Create Custom Query"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.customQueryScreen(master)

        def size():
            if(who=="a"):
                return 7
            else:
                return 4
        menuFrame = Frame(master, width=300, height=200, bg="gray")
        menuFrame.pack(pady=10)
        menuFrame.pack_propagate(0)
        questionLabel = Label(menuFrame, text="What would you like to do " + str(who) + "?", bg="gray")
        menuList = Listbox(menuFrame, height=size(), bg="darkgray")
        menuList.insert(1, 'Lookup Customer')
        menuList.insert(2, 'Add New Customer')
        menuList.insert(3, 'Lookup Invoice')
        menuList.insert(4, 'Create New Order')
        if(who == "a"):
            menuList.insert(5, 'Generate Report')
            menuList.insert(6, 'Create Custom Query')
            menuList.insert(7, 'Create New Employee')
        goButton = Button(menuFrame, text="Go To Screen")
        goButton.bind("<Button-1>", goToPage)
        master.bind("<Return>", goToPage)
        questionLabel.grid(row=0, columnspan = 2, pady=10)
        menuList.grid(rowspan=2, sticky=W)
        goButton.grid(row=2, column=1, padx=10, sticky=S)

    #Lookup customers Screen for employees
    def customerLookupScreen(master):

        def searchCustomer(event):#ERROr PaintsMain.currentCustomer = int(result[0][0]) IndexError: list index out of range
            idValue = str(customerID.get())
            firstNameValue = str(firstName.get())
            lastNameValue = str(lastName.get())
            if (idValue == "" and (firstNameValue == "" or lastNameValue == "")):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You must fill the required fields!')
            else:
                if(idValue != ""):
                    cursor.execute('SELECT * FROM Customer WHERE Id = "' + idValue + '"')# + '" AND Password = "' + passwordValue + '"')
                    result = cursor.fetchall()
                    if(str(result) == "[]"):
                        tkinter.messagebox.showerror('Incorrect ID','Attention, The ID you\'ve entered was not found!')
                    else:
                        time.sleep(.3)
                        PaintsMain.currentCustomer = int(result[0][0])
                        customerLookupFrame.destroy()
                        PaintsMain.customerInfoScreen(master)
                else:
                    cursor.execute('SELECT * FROM Customer WHERE First_Name = "' + firstNameValue + '" AND Last_Name = "' + lastNameValue + '"')
                    result = cursor.fetchall()
                    PaintsMain.currentCustomer = int(result[0][0])
                    print(str(nameResult))

        #Building customerLookupScreen Components
        customerLookupFrame = Frame(master, width=300, height=200, bg="gray")
        customerLookupFrame.pack(pady=5)
        customerLookupFrame.pack_propagate(0)
        lookupLabel = Label(customerLookupFrame, text="Lookup a customer by ID or by first and last name:", bg="gray")
        idLabel = Label(customerLookupFrame, text="Customer ID:", bg="gray")
        customerID = StringVar()
        idEntry = Entry(customerLookupFrame, textvariable=customerID, bg="darkgray")
        orLabel = Label(customerLookupFrame, text="-Or-", bg="gray")
        firstNameLabel = Label(customerLookupFrame, text="First Name:", bg="gray")
        lastNameLabel = Label(customerLookupFrame, text="Last Name:", bg="gray")
        firstName = StringVar()
        firstNameEntry = Entry(customerLookupFrame, textvariable=firstName, bg="darkgray")
        lastName = StringVar()
        lastNameEntry = Entry(customerLookupFrame, textvariable=lastName, bg="darkgray")
        searchButton = Button(customerLookupFrame, text="Search")
        searchButton.bind("<Button-1>", searchCustomer)
        master.bind("<Return>", searchCustomer)
        lookupLabel.grid(row=0,columnspan=2, pady=10)
        idLabel.grid(row=1, sticky=E)
        idEntry.grid(row=1, column=1)
        orLabel.grid(row=2, columnspan=2, padx=10, pady=10)
        firstNameLabel.grid(row=3, sticky=E)
        lastNameLabel.grid(row=4, sticky=E)
        firstNameEntry.grid(row=3, column=1)
        lastNameEntry.grid(row=4, column=1)
        searchButton.grid(row=5, columnspan=2, pady=10)

    # Lookup customers Screen for employees
    def newCustomerScreen(master):

        def newCustomer(event):
            newFirstNameValue = str(newFirstName.get())
            newLastNameValue = str(newLastName.get())
            newStreetValue = str(newStreet.get())
            newCityValue = str(newCity.get())
            newStateValue = str(newState.get())
            newZipValue = str(newZip.get())
            if (newFirstNameValue == "" or newLastNameValue == "" or newStreetValue == "" or newCityValue == "" or newStateValue == "" or newZipValue == ""):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You must fill the required fields!')
            else:
                answer = tkinter.messagebox.askquestion('Click Yes to Proceed', 'Are you sure all of the information entered is correct?')
                if (answer == 'yes'):
                    cursor.execute('SELECT * FROM Customer WHERE First_Name = "' + newFirstNameValue + '" AND Last_Name = "' + newLastNameValue + '" AND Street = "' + newStreetValue + '" AND City = "' + newCityValue + '" AND State = "' + newStateValue + '" AND Zip = "' + newZipValue + '"')
                    result = cursor.fetchall()
                    if (str(result) != '[]'):
                        answer = tkinter.messagebox.askquestion('Existing Customer Error', 'The customer you tried to create is already existing. Go to their profile?')
                        if(answer == 'yes'):
                            time.sleep(.3)
                            PaintsMain.currentCustomer = int(result[0][0])
                            newCustomerFrame.destroy()
                            PaintsMain.customerInfoScreen(master)
                    else:
                        cursor.execute('INSERT INTO Customer (First_Name, Last_Name, Street, City, State, Zip) VALUES ("' + newFirstNameValue + '", "' + newLastNameValue + '", "' + newStreetValue + '", "' + newCityValue + '", "' + newStateValue + '", "' + newZipValue + '")')
                        connection.commit()
                        cursor.execute('SELECT * FROM Customer WHERE First_Name = "' + newFirstNameValue + '" AND Last_Name = "' + newLastNameValue + '" AND Street = "' + newStreetValue + '" AND City = "' + newCityValue + '" AND State = "' + newStateValue + '" AND Zip = "' + newZipValue + '"')
                        result = cursor.fetchall()
                        PaintsMain.currentCustomer = int(result[0][0])
                        time.sleep(.3)
                        newCustomerFrame.destroy()
                        PaintsMain.customerInfoScreen(master)

        #Building newCustomerScreen Components
        newCustomerFrame = Frame(master, width=300, height=200, bg="gray")
        newCustomerFrame.pack()
        newCustomerFrame.pack_propagate(0)
        newCustomerLabel = Label(newCustomerFrame, text="Enter credentials for the new customer:", bg="gray")
        newFirstNameLabel = Label(newCustomerFrame, text="First Name:", bg="gray")
        newLastNameLabel = Label(newCustomerFrame, text="Last Name:", bg="gray")
        newFirstName = StringVar()
        newFirstNameEntry = Entry(newCustomerFrame, textvariable=newFirstName, bg="darkgray")
        newLastName = StringVar()
        newLastNameEntry = Entry(newCustomerFrame, textvariable=newLastName, bg="darkgray")
        newStreetLabel = Label(newCustomerFrame, text="Street:", bg="gray")
        newCityLabel = Label(newCustomerFrame, text="City:", bg="gray")
        newStreet = StringVar()
        newStreetEntry = Entry(newCustomerFrame, textvariable=newStreet, bg="darkgray")
        newCity = StringVar()
        newCityEntry = Entry(newCustomerFrame, textvariable=newCity, bg="darkgray")
        newStateLabel = Label(newCustomerFrame, text="State:", bg="gray")
        newZipLabel = Label(newCustomerFrame, text="ZIP:", bg="gray")
        newState = StringVar()
        newStateEntry = Entry(newCustomerFrame, textvariable=newState, bg="darkgray")
        newZip = StringVar()
        newZipEntry = Entry(newCustomerFrame, textvariable=newZip, bg="darkgray")
        newCustomerButton = Button(newCustomerFrame, text="Create")
        newCustomerButton.bind("<Button-1>", newCustomer)
        master.bind("<Return>", newCustomer)
        newCustomerLabel.grid(row=0, columnspan=2, pady=5)
        newFirstNameLabel.grid(row=1, sticky=E)
        newLastNameLabel.grid(row=2, sticky=E)
        newFirstNameEntry.grid(row=1, column=1)
        newLastNameEntry.grid(row=2, column=1)
        newStreetLabel.grid(row=3, sticky=E)
        newCityLabel.grid(row=4, sticky=E)
        newStreetEntry.grid(row=3, column=1)
        newCityEntry.grid(row=4, column=1)
        newStateLabel.grid(row=5, sticky=E)
        newZipLabel.grid(row=6, sticky=E)
        newStateEntry.grid(row=5, column=1)
        newZipEntry.grid(row=6, column=1)
        newCustomerButton.grid(row=7, columnspan=2, pady=10)

    def customerInfoScreen(master):

        def makePayment(event):
            paymentAmount = payment.get()
            result = getResult()
            if (paymentAmount == ""):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You did not enter a payment amount!')
            elif(isNumber(paymentAmount) == False):
                tkinter.messagebox.showerror('Payment Error', 'Attention, The value you entered is not a number!')
            else:
                paymentAmount = float(paymentAmount)
                answer = tkinter.messagebox.askquestion('Click Yes to Proceed', 'Are you sure this payment amount is correct?')
                if (answer == 'yes'):
                    adjustBalance = float(result[0][7])-paymentAmount
                    if(paymentAmount<.01):
                        tkinter.messagebox.showerror('Payment Error','Attention, The payment attempted was negative/zero!')
                    elif(adjustBalance<0):
                        tkinter.messagebox.showerror('Payment Error','Attention, The payment attempted was more than the balance!')
                    else:
                        currentBalance.set("$" + str(round(adjustBalance,2)))
                        cursor.execute('UPDATE Customer SET Balance = "' + str(adjustBalance) + '" WHERE Id = "' + str(PaintsMain.currentCustomer) + '"')
                        connection.commit()
                        result=getResult()
                        tkinter.messagebox.showinfo('Payment Success', 'Attention, The payment has succesfully been recorded!')

        def getResult():
            cursor.execute('SELECT * FROM Customer WHERE Id = "' + str(PaintsMain.currentCustomer) + '"')
            return cursor.fetchall()

        def isNumber(n):
            try:
                float(n)
                return True
            except ValueError:
                return False

        customerInfoFrame = Frame(master, width=300, height=200, bg="gray")
        customerInfoFrame.pack(side=LEFT, padx=5)
        customerInfoFrame.pack_propagate(0)
        customerInfoLabel = Label(customerInfoFrame, text="Customer Profile:", bg="gray")
        result = getResult()
        cIdLabel = Label(customerInfoFrame, text="Customer ID: ", bg="gray")
        cId = Label(customerInfoFrame, text=str(result[0][0]), bg="gray")
        cFirstLabel = Label(customerInfoFrame, text="First Name: ", bg="gray")
        cFirst = Label(customerInfoFrame, text=str(result[0][1]), bg="gray")
        cLastLabel = Label(customerInfoFrame, text="Last Name: ", bg="gray")
        cLast= Label(customerInfoFrame, text=str(result[0][2]), bg="gray")
        cStreetLabel = Label(customerInfoFrame, text="Street: ", bg="gray")
        cStreet = Label(customerInfoFrame, text=str(result[0][3]), bg="gray")
        cCityLabel = Label(customerInfoFrame, text="City: ", bg="gray")
        cCity = Label(customerInfoFrame, text=str(result[0][4]), bg="gray")
        cStateLabel = Label(customerInfoFrame, text="State: ", bg="gray")
        cState = Label(customerInfoFrame, text=str(result[0][5]), bg="gray")
        cZipLabel = Label(customerInfoFrame, text="ZIP Code: ", bg="gray")
        cZip = Label(customerInfoFrame, text=str(result[0][6]), bg="gray")
        customerInfoLabel.grid(row=0, columnspan=2, pady=5)
        cIdLabel.grid(row=1, sticky=E)
        cId.grid(row=1, column=1, sticky=W)
        cFirstLabel.grid(row=2, sticky=E)
        cLastLabel.grid(row=3, sticky=E)
        cFirst.grid(row=2, column=1, sticky=W)
        cLast.grid(row=3, column=1, sticky=W)
        cStreetLabel.grid(row=4, sticky=E)
        cCityLabel.grid(row=5, sticky=E)
        cStreet.grid(row=4, column=1, sticky=W)
        cCity.grid(row=5, column=1, sticky=W)
        cStateLabel.grid(row=6, sticky=E)
        cZipLabel.grid(row=7, sticky=E)
        cState.grid(row=6, column=1, sticky=W)
        cZip.grid(row=7, column=1, sticky=W)

        paymentFrame = Frame(master, highlightbackground="red", highlightcolor="red",highlightthickness=1)
        paymentFrame.pack(side=RIGHT, padx=10)
        cBalanceLabel = Label(paymentFrame, text="Balance: ")
        currentBalance = StringVar()
        currentBalance.set("$" + str(result[0][7]))
        cBalance = Label(paymentFrame, textvariable=currentBalance)
        payment = StringVar()
        paymentEntry = Entry(paymentFrame, textvariable=payment, width=10, bg="darkgray")
        paymentDateLabel = Label(paymentFrame, text="Payment Date:")
        currentDate = datetime.datetime.today().strftime('%Y-%m-%d')
        paymentDate = Label(paymentFrame, text=str(currentDate))
        makePaymentButton = Button(paymentFrame, text="Make Payment", bg="gray")
        makePaymentButton.bind("<Button-1>", makePayment)
        master.bind("<Return>", makePayment)
        paymentLabel = Label(paymentFrame, text="Payment: ")
        cBalanceLabel.grid(row=0, sticky=W)
        cBalance.grid(row=1, sticky=E)
        paymentLabel.grid(row=2, sticky=W)
        paymentEntry.grid(row=3, sticky=E)
        paymentDateLabel.grid(row=4, sticky=W)
        paymentDate.grid(row=5, sticky=E)
        makePaymentButton.grid(row=6, padx=5, pady=15)

    def customQueryScreen(master):

        def query(event):#NEED TO HANDLE ERROR WHEN ENTER KEY IS QUERYED
            enteredQuery = customQueryEntry.get("1.0", 'end-1c')
            if(enteredQuery == ""):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You did not enter a query!')
            else:
                answer = tkinter.messagebox.askquestion('Click Yes to Proceed','Are you sure your query is correct?')
                if(answer == "yes"):
                    try:
                        cursor.execute(enteredQuery)
                        connection.commit()
                        tkinter.messagebox.showinfo('Query Success', 'Attention, The query has succesfully been entered!')
                    except(sqlite3.OperationalError):
                        tkinter.messagebox.showerror('Query Error', 'Attention, The query you have entered is not valid!')

        customQueryFrame = Frame(master, width=300, height=200, bg="gray")
        customQueryFrame.pack()
        customQueryFrame.pack_propagate(0)
        customQueryLabel = Label(customQueryFrame, text="Enter a Custom Query: ", bg="gray")
        customQueryLabel.pack(padx=5, pady=10)
        customQuery = StringVar()
        customQueryEntry = Text(customQueryFrame, height=5, width=30, bg="darkgray")
        customQueryEntry.pack()
        queryButton = Button(customQueryFrame, text="Query", bg="gray")
        queryButton.bind("<Button-1>", query)
        queryButton.pack(pady=10)

#Creating window and calling PaintsMain class which initialized login window
root = Tk()
root.title('Paints R Us')
root.geometry("300x200")
root.config(background="gray")
b = PaintsMain(root)
root.mainloop()