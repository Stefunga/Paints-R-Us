from tkinter import *
import tkinter.messagebox
import sqlite3
import time
import datetime

#Connecting to Paints-R-Us Database
connection = sqlite3.connect('PaintsRUs.db')
cursor = connection.cursor()

#Main class/UI for software
class PaintsMain:
    currentPayment = 0
    currentEmployee = -1
    currentDept = -1
    currentCustomer = -1
    employeeName="blank"
    total=0
    #FINISHED, DO NOT TOUCH
    def __init__(self, master):

        #When submit button is clicked, Username and Password values are retrieved from 'PaintsRUs.db' to see if they exist
        def submit(event):
            time.sleep(.1)
            usernameValue = str(username.get())
            passwordValue = str(password.get())
            PaintsMain.employeeName=usernameValue
            cursor.execute('SELECT * FROM Employee WHERE Emp_Fname = "' + usernameValue + '" AND Emp_Lname = "' + passwordValue + '"')
            result = cursor.fetchall()
            if(str(result) == '[]'):#If user not found, error window appears
                tkinter.messagebox.showerror('Sign In Error', 'Incorrect Username or Password, Please try again')
            else:#If user found, the login frame is removed and the main frame is loaded
                PaintsMain.currentEmployee = int(result[0][0])
                PaintsMain.currentDept = int(result[0][7])
                time.sleep(.3)
                loginFrame.destroy()
                PaintsMain.menuScreen(master)

        # Building loginScreen Components
        loginFrame = Frame(master, width = 300, height = 200, bg="gray")
        loginFrame.pack(pady=25)
        loginFrame.pack_propagate(0)
        signLabel = Label(loginFrame, text="Welcome to Paints-R-Us, Please Sign In!", bg="gray")
        nameLabel = Label(loginFrame, text="Username", bg="gray")
        passLabel = Label(loginFrame, text="Password", bg="gray")
        username = StringVar()
        nameEntry = Entry(loginFrame, textvariable = username, bg="darkgray")
        password = StringVar()
        passEntry = Entry(loginFrame, textvariable = password, bg="darkgray")
        passEntry.config(show="*");
        loginButton = Button(loginFrame, text="Login")
        loginButton.bind("<Button-1>", submit)
        master.bind("<Return>", submit)
        signLabel.grid(row=0, columnspan = 2, pady=15)
        nameLabel.grid(row=1, sticky=E)
        passLabel.grid(row=2, sticky=E)
        nameEntry.grid(row=1, column=1)
        passEntry.grid(row=2, column=1)
        loginButton.grid(row=3, columnspan = 2, pady=12)

    #FINISHED, DO NOT TOUCH
    def menuScreen(master):

        def goToPage(event):
            currentGo = menuList.get(menuList.curselection())
            master.unbind("<Return>")
            if(str(currentGo)=="Lookup Customer"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.customerLookupScreen(master)
            elif(str(currentGo) == "Add New Customer"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.newCustomerScreen(master)
            elif(str(currentGo) == "Create Custom Query"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.customQueryScreen(master)
            elif (str(currentGo) == "Create New Order"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.newOrderScreen(master)
            elif (str(currentGo) == "Create New Employee"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.newEmployeeScreen(master)
            elif (str(currentGo) == "Lookup Invoice"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.lookupInvoiceScreen(master)

        def size():
            if(PaintsMain.currentDept==3):
                return 6
            else:
                return 4

        master.unbind("<Escape>")
        menuFrame = Frame(master, width=300, height=200, bg="gray")
        menuFrame.pack(pady=10)
        menuFrame.pack_propagate(0)
        questionLabel = Label(menuFrame, text="What would you like to do " + str(PaintsMain.employeeName) + "?", bg="gray")
        menuList = Listbox(menuFrame, height=size(), bg="darkgray")
        menuList.insert(1, 'Lookup Customer')
        menuList.insert(2, 'Add New Customer')
        menuList.insert(3, 'Lookup Invoice')
        menuList.insert(4, 'Create New Order')
        if(PaintsMain.currentDept==3):
            #menuList.insert(5, 'Generate Report')
            menuList.insert(5, 'Create Custom Query')
            menuList.insert(6, 'Create New Employee')
        goButton = Button(menuFrame, text="Go To Screen")
        goButton.bind("<Button-1>", goToPage)

        master.bind("<Return>", goToPage)
        questionLabel.grid(row=0, columnspan = 2, pady=10)
        menuList.grid(rowspan=2, sticky=W)
        goButton.grid(row=2, column=1, padx=10, sticky=S)
        returnLabel = Label(menuFrame, text="Press 'Esc' key to return to this menu!",bg="gray")
        returnLabel.grid(row=3, columnspan=2, pady=5)

    #FINISHED, DO NOT TOUCH
    def customerLookupScreen(master):

        def Return(event):
            time.sleep(.3)
            customerLookupFrame.destroy()
            PaintsMain.menuScreen(master)

        master.bind("<Escape>", Return)

        def searchCustomer(event):#ERROr PaintsMain.currentCustomer = int(result[0][0]) IndexError: list index out of range
            idValue = str(customerID.get())
            firstNameValue = str(firstName.get())
            lastNameValue = str(lastName.get())
            if (idValue == "" and (firstNameValue == "" or lastNameValue == "")):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You must fill the required fields!')
            else:
                if(idValue != ""):
                    cursor.execute('SELECT * FROM Customer WHERE Cust_Code = "' + idValue + '"')# + '" AND Password = "' + passwordValue + '"')
                    result = cursor.fetchall()
                    if(str(result) == "[]"):
                        tkinter.messagebox.showerror('Incorrect ID','Attention, The ID you\'ve entered was not found!')
                    else:
                        time.sleep(.3)
                        PaintsMain.currentCustomer = str(result[0][0])
                        customerLookupFrame.destroy()
                        PaintsMain.customerInfoScreen(master)
                else:
                    cursor.execute('SELECT * FROM Customer WHERE Cust_Fname = "' + firstNameValue + '" AND Cust_Lname = "' + lastNameValue + '"')
                    result = cursor.fetchall()
                    PaintsMain.currentCustomer = str(result[0][0])
                    customerLookupFrame.destroy()
                    PaintsMain.customerInfoScreen(master)

        #Building customerLookupScreen Components
        customerLookupFrame = Frame(master, width=300, height=200, bg="gray")
        customerLookupFrame.pack(pady=5)
        customerLookupFrame.pack_propagate(0)
        lookupLabel = Label(customerLookupFrame, text="Lookup a customer by ID or by first and last name:", bg="gray")
        idLabel = Label(customerLookupFrame, text="Customer ID:", bg="gray")
        customerID = StringVar()
        idEntry = Entry(customerLookupFrame, textvariable=customerID, bg="darkgray")
        orLabel = Label(customerLookupFrame, text="-Or-", bg="gray")
        firstNameLabel = Label(customerLookupFrame, text="First Name:", bg="gray")
        lastNameLabel = Label(customerLookupFrame, text="Last Name:", bg="gray")
        firstName = StringVar()
        firstNameEntry = Entry(customerLookupFrame, textvariable=firstName, bg="darkgray")
        lastName = StringVar()
        lastNameEntry = Entry(customerLookupFrame, textvariable=lastName, bg="darkgray")
        searchButton = Button(customerLookupFrame, text="Search")
        searchButton.bind("<Button-1>", searchCustomer)
        master.bind("<Return>", searchCustomer)
        lookupLabel.grid(row=0,columnspan=2, pady=10)
        idLabel.grid(row=1, sticky=E)
        idEntry.grid(row=1, column=1)
        orLabel.grid(row=2, columnspan=2, padx=10, pady=10)
        firstNameLabel.grid(row=3, sticky=E)
        lastNameLabel.grid(row=4, sticky=E)
        firstNameEntry.grid(row=3, column=1)
        lastNameEntry.grid(row=4, column=1)
        searchButton.grid(row=5, columnspan=2, pady=10)

    #FINISHED, DO NOT TOUCH
    def newCustomerScreen(master):

        def Return(event):
            time.sleep(.3)
            newCustomerFrame.destroy()
            PaintsMain.menuScreen(master)

        master.bind("<Escape>", Return)

        def newCustomer(event):
            newFirstNameValue = str(newFirstName.get())
            newLastNameValue = str(newLastName.get())
            newStreetValue = str(newStreet.get())
            newCityValue = str(newCity.get())
            newStateValue = str(newState.get())
            newZipValue = str(newZip.get())
            if (newFirstNameValue == "" or newLastNameValue == "" or newStreetValue == "" or newCityValue == "" or newStateValue == "" or newZipValue == ""):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You must fill the required fields!')
            else:
                answer = tkinter.messagebox.askquestion('Click Yes to Proceed', 'Are you sure all of the information entered is correct?')
                if (answer == 'yes'):
                    cursor.execute('SELECT * FROM Customer WHERE Cust_Fname = "' + newFirstNameValue + '" AND Cust_Lname = "' + newLastNameValue + '" AND Cust_Street = "' + newStreetValue + '" AND Cust_City = "' + newCityValue + '" AND Cust_State = "' + newStateValue + '" AND Cust_ZIP = "' + newZipValue + '"')
                    result = cursor.fetchall()
                    if (str(result) != '[]'):
                        answer = tkinter.messagebox.askquestion('Existing Customer Error', 'The customer you tried to create is already existing. Go to their profile?')
                        if(answer == 'yes'):
                            time.sleep(.3)
                            PaintsMain.currentCustomer = result[0][0]
                            newCustomerFrame.destroy()
                            PaintsMain.customerInfoScreen(master)
                    else:
                        cursor.execute('INSERT INTO Customer (Cust_Code, Cust_Fname, Cust_Lname, Cust_Street, Cust_City, Cust_State, Cust_ZIP, Cust_Bal) VALUES ("' + newLastNameValue + '1", "' + newFirstNameValue + '", "' + newLastNameValue + '", "' + newStreetValue + '", "' + newCityValue + '", "' + newStateValue + '", "' + newZipValue + '", "0")')
                        connection.commit()
                        cursor.execute('SELECT * FROM Customer WHERE Cust_Fname = "' + newFirstNameValue + '" AND Cust_Lname = "' + newLastNameValue + '" AND Cust_Street = "' + newStreetValue + '" AND Cust_City = "' + newCityValue + '" AND Cust_State = "' + newStateValue + '" AND Cust_ZIP = "' + newZipValue + '"')
                        result = cursor.fetchall()
                        PaintsMain.currentCustomer = result[0][0]
                        time.sleep(.3)
                        newCustomerFrame.destroy()
                        PaintsMain.customerInfoScreen(master)

        #Building newCustomerScreen Components
        newCustomerFrame = Frame(master, width=300, height=200, bg="gray")
        newCustomerFrame.pack()
        newCustomerFrame.pack_propagate(0)
        newCustomerLabel = Label(newCustomerFrame, text="Enter credentials for the new customer:", bg="gray")
        newFirstNameLabel = Label(newCustomerFrame, text="First Name:", bg="gray")
        newLastNameLabel = Label(newCustomerFrame, text="Last Name:", bg="gray")
        newFirstName = StringVar()
        newFirstNameEntry = Entry(newCustomerFrame, textvariable=newFirstName, bg="darkgray")
        newLastName = StringVar()
        newLastNameEntry = Entry(newCustomerFrame, textvariable=newLastName, bg="darkgray")
        newStreetLabel = Label(newCustomerFrame, text="Street:", bg="gray")
        newCityLabel = Label(newCustomerFrame, text="City:", bg="gray")
        newStreet = StringVar()
        newStreetEntry = Entry(newCustomerFrame, textvariable=newStreet, bg="darkgray")
        newCity = StringVar()
        newCityEntry = Entry(newCustomerFrame, textvariable=newCity, bg="darkgray")
        newStateLabel = Label(newCustomerFrame, text="State:", bg="gray")
        newZipLabel = Label(newCustomerFrame, text="ZIP:", bg="gray")
        newState = StringVar()
        newStateEntry = Entry(newCustomerFrame, textvariable=newState, bg="darkgray")
        newZip = StringVar()
        newZipEntry = Entry(newCustomerFrame, textvariable=newZip, bg="darkgray")
        newCustomerButton = Button(newCustomerFrame, text="Create")
        newCustomerButton.bind("<Button-1>", newCustomer)
        master.bind("<Return>", newCustomer)
        newCustomerLabel.grid(row=0, columnspan=2, pady=5)
        newFirstNameLabel.grid(row=1, sticky=E)
        newLastNameLabel.grid(row=2, sticky=E)
        newFirstNameEntry.grid(row=1, column=1)
        newLastNameEntry.grid(row=2, column=1)
        newStreetLabel.grid(row=3, sticky=E)
        newCityLabel.grid(row=4, sticky=E)
        newStreetEntry.grid(row=3, column=1)
        newCityEntry.grid(row=4, column=1)
        newStateLabel.grid(row=5, sticky=E)
        newZipLabel.grid(row=6, sticky=E)
        newStateEntry.grid(row=5, column=1)
        newZipEntry.grid(row=6, column=1)
        newCustomerButton.grid(row=7, columnspan=2, pady=10)

    #FINISHED, DO NOT TOUCH
    def customerInfoScreen(master):

        def Return(event):
            time.sleep(.3)
            customerInfoFrame.destroy()
            paymentFrame.destroy()
            PaintsMain.menuScreen(master)

        master.bind("<Escape>", Return)

        def makePayment(event):
            paymentAmount = payment.get()
            result = getResult()
            if (paymentAmount == ""):
                tkinter.messagebox.showerror('Blank Field(s) Error','Attention, You did not enter a payment amount!')
            elif (isNumber(paymentAmount) == False):
                tkinter.messagebox.showerror('Payment Error', 'Attention, The value you entered is not a number!')
            else:
                paymentAmount = float(paymentAmount)
                answer = tkinter.messagebox.askquestion('Click Yes to Proceed','Are you sure this payment amount is correct?')
                if (answer == 'yes'):
                    adjustBalance = float(result[0][7]) - paymentAmount
                    if (paymentAmount < .01):
                        tkinter.messagebox.showerror('Payment Error','Attention, The payment attempted was negative/zero!')
                    elif (adjustBalance < 0):
                        tkinter.messagebox.showerror('Payment Error','Attention, The payment attempted was more than the balance!')
                    else:
                        currentBalance.set("$" + str(round(adjustBalance, 2)))
                        cursor.execute('UPDATE Customer SET Cust_Bal = "' + str(adjustBalance) + '" WHERE Cust_Code = "' + str(PaintsMain.currentCustomer) + '"')
                        connection.commit()
                        result = getResult()
                        tkinter.messagebox.showinfo('Payment Success','Attention, The payment has succesfully been recorded!')

        def getResult():
            cursor.execute('SELECT * FROM Customer WHERE Cust_Code = "' + str(PaintsMain.currentCustomer) + '"')
            return cursor.fetchall()

        def isNumber(n):
            try:
                float(n)
                return True
            except ValueError:
                return False

        customerInfoFrame = Frame(master, width=300, height=200, bg="gray")
        customerInfoFrame.pack(side=LEFT, padx=4)
        customerInfoFrame.pack_propagate(0)
        customerInfoLabel = Label(customerInfoFrame, text="Customer Profile:", bg="gray")
        result = getResult()
        cIdLabel = Label(customerInfoFrame, text="Customer ID: ", bg="gray")
        cId = Label(customerInfoFrame, text=str(result[0][0]), bg="gray")
        cFirstLabel = Label(customerInfoFrame, text="First Name: ", bg="gray")
        cFirst = Label(customerInfoFrame, text=str(result[0][1]), bg="gray")
        cLastLabel = Label(customerInfoFrame, text="Last Name: ", bg="gray")
        cLast= Label(customerInfoFrame, text=str(result[0][2]), bg="gray")
        cStreetLabel = Label(customerInfoFrame, text="Street: ", bg="gray")
        cStreet = Label(customerInfoFrame, text=str(result[0][3]), bg="gray")
        cCityLabel = Label(customerInfoFrame, text="City: ", bg="gray")
        cCity = Label(customerInfoFrame, text=str(result[0][4]), bg="gray")
        cStateLabel = Label(customerInfoFrame, text="State: ", bg="gray")
        cState = Label(customerInfoFrame, text=str(result[0][5]), bg="gray")
        cZipLabel = Label(customerInfoFrame, text="ZIP Code: ", bg="gray")
        cZip = Label(customerInfoFrame, text=str(result[0][6]), bg="gray")
        customerInfoLabel.grid(row=0, columnspan=2, pady=5)
        cIdLabel.grid(row=1, sticky=E)
        cId.grid(row=1, column=1, sticky=W)
        cFirstLabel.grid(row=2, sticky=E)
        cLastLabel.grid(row=3, sticky=E)
        cFirst.grid(row=2, column=1, sticky=W)
        cLast.grid(row=3, column=1, sticky=W)
        cStreetLabel.grid(row=4, sticky=E)
        cCityLabel.grid(row=5, sticky=E)
        cStreet.grid(row=4, column=1, sticky=W)
        cCity.grid(row=5, column=1, sticky=W)
        cStateLabel.grid(row=6, sticky=E)
        cZipLabel.grid(row=7, sticky=E)
        cState.grid(row=6, column=1, sticky=W)
        cZip.grid(row=7, column=1, sticky=W)

        paymentFrame = Frame(master, highlightbackground="red", highlightcolor="red", highlightthickness=1)
        paymentFrame.pack(side=RIGHT, padx=2)
        cBalanceLabel = Label(paymentFrame, text="Balance: ")
        currentBalance = StringVar()
        currentBalance.set("$" + str(result[0][7]))
        cBalance = Label(paymentFrame, textvariable=currentBalance)
        payment = StringVar()
        paymentEntry = Entry(paymentFrame, textvariable=payment, width=10, bg="darkgray")
        paymentDateLabel = Label(paymentFrame, text="Payment Date:")
        currentDate = datetime.datetime.today().strftime('%Y-%m-%d')
        paymentDate = Label(paymentFrame, text=str(currentDate))
        makePaymentButton = Button(paymentFrame, text="Make Payment", bg="gray")
        makePaymentButton.bind("<Button-1>", makePayment)
        master.bind("<Return>", makePayment)
        paymentLabel = Label(paymentFrame, text="Payment: ")
        cBalanceLabel.grid(row=0, sticky=W)
        cBalance.grid(row=1, sticky=E)
        paymentLabel.grid(row=2, sticky=W)
        paymentEntry.grid(row=3, sticky=E)
        paymentDateLabel.grid(row=4, sticky=W)
        paymentDate.grid(row=5, sticky=E)
        makePaymentButton.grid(row=6, padx=3, pady=15)

    #FINISHED, DO NOT TOUCH
    def customQueryScreen(master):

        def Return(event):
            time.sleep(.3)
            customQueryFrame.destroy()
            PaintsMain.menuScreen(master)

        master.bind("<Escape>", Return)

        def query(event):#NEED TO HANDLE ERROR WHEN ENTER KEY IS QUERYED
            enteredQuery = customQueryEntry.get("1.0", 'end-1c')
            if(enteredQuery == ""):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You did not enter a query!')
            else:
                answer = tkinter.messagebox.askquestion('Click Yes to Proceed','Are you sure your query is correct?')
                if(answer == "yes"):
                    try:
                        cursor.execute(enteredQuery)
                        connection.commit()
                        tkinter.messagebox.showinfo('Query Success','Attention, The query has succesfully been entered!')
                        test = cursor.fetchall()
                        pList = cursor.execute(enteredQuery)
                        if(str(test) != "[]"):
                            resultQuery = Tk()
                            resultQuery.geometry("500x300")
                            resultQueryFrame = Frame(resultQuery, bg="gray")
                            resultQueryFrame.pack(fill=BOTH, expand=YES)
                            queryList = Listbox(resultQueryFrame, bg="darkgray")
                            queryList.pack(fill=BOTH, expand=YES, padx=5, pady=5)
                            i = 0
                            pList.__sizeof__()
                            while i < pList.__sizeof__():
                                queryList.insert(int(i), pList.fetchone())
                                i = i + 1
                            resultQuery.mainloop()
                        else:
                            tkinter.messagebox.showinfo('Query Success',
                                                        'Success however, no result!')
                    except(sqlite3.OperationalError):
                        tkinter.messagebox.showerror('Query Error', 'Attention, The query you have entered is not valid!')

        customQueryFrame = Frame(master, width=300, height=200, bg="gray")
        customQueryFrame.pack()
        customQueryFrame.pack_propagate(0)
        customQueryLabel = Label(customQueryFrame, text="Enter a Custom Query: ", bg="gray")
        customQueryLabel.pack(padx=5, pady=10)
        customQuery = StringVar()
        customQueryEntry = Text(customQueryFrame, height=5, width=30, bg="darkgray")
        customQueryEntry.pack()
        queryButton = Button(customQueryFrame, text="Query", bg="gray")
        queryButton.bind("<Button-1>", query)
        master.bind("<Return>", query)
        queryButton.pack(pady=10)

    #FINISHED, DO NOT TOUCH
    def newEmployeeScreen(master):

        def Return(event):
            time.sleep(.3)
            newEmployeeFrame.destroy()
            PaintsMain.menuScreen(master)

        master.bind("<Escape>", Return)

        def newEmployee(event):
            newFirstNameValue = str(newFirstName.get())
            newLastNameValue = str(newLastName.get())
            newTitleValue = str(newTitle.get())
            newDepartmentValue = str(newDepartment.get())
            newEmailValue = newFirstNameValue + newLastNameValue + "@paintsrus.com"
            newPhoneValue = "845-001-000" + newDepartmentValue
            cursor.execute('SELECT COUNT(*) FROM Employee')
            newEmployeeNumber = str(int(cursor.fetchall()[0][0]) + 2)
            hireDate = datetime.datetime.today().strftime('%Y-%m-%d')

            if (newFirstNameValue == "" or newLastNameValue == "" or newTitleValue == "" or newDepartmentValue == ""):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You must fill the required fields!')
            else:
                answer = tkinter.messagebox.askquestion('Click Yes to Proceed', 'Are you sure all of the information entered is correct?')
                if (answer == 'yes'):
                    cursor.execute('SELECT * FROM Employee WHERE Emp_Email = "' + newEmailValue + '"')
                    result = cursor.fetchall()
                    if (str(result) != '[]'):
                        answer = tkinter.messagebox.showerror('Existing Employee Error', 'The employee you tried to create is already existing!')
                    else:
                        cursor.execute(
                            'INSERT INTO Employee (Emp_Number, Emp_Fname, Emp_Lname, Emp_Email, Emp_Phone, Emp_Hiredate, Emp_Title, Dept_Number) VALUES '
                            '("' + newEmployeeNumber + '", "' + newFirstNameValue + '", "' + newLastNameValue + '", "' + newEmailValue + '", "' + newPhoneValue + '", "' + hireDate + '", "' + newTitleValue + '", "' + newDepartmentValue + '")')
                        connection.commit()
                        answer = tkinter.messagebox.askquestion('Creation Success', 'New employee was created, would you like to return to the main menu?')
                        if (answer == 'yes'):
                            time.sleep(.3)
                            newEmployeeFrame.destroy()
                            PaintsMain.menuScreen(master)

        newEmployeeFrame = Frame(master, width=300, height=200, bg="gray")
        newEmployeeFrame.pack()
        newEmployeeFrame.pack_propagate(0)
        newEmployeeLabel = Label(newEmployeeFrame, text="Enter credentials for the new employee:", bg="gray")
        newFirstNameLabel = Label(newEmployeeFrame, text="First Name:", bg="gray")
        newLastNameLabel = Label(newEmployeeFrame, text="Last Name:", bg="gray")
        newFirstName = StringVar()
        newFirstNameEntry = Entry(newEmployeeFrame, textvariable=newFirstName, bg="darkgray")
        newLastName = StringVar()
        newLastNameEntry = Entry(newEmployeeFrame, textvariable=newLastName, bg="darkgray")
        newTitleLabel = Label(newEmployeeFrame, text="Title:", bg="gray")
        newDepartmentLabel = Label(newEmployeeFrame, text="Department:", bg="gray")
        newTitle = StringVar()
        newTitleEntry = Entry(newEmployeeFrame, textvariable=newTitle, bg="darkgray")
        newDepartment = StringVar()
        newDepartmentEntry = Entry(newEmployeeFrame, textvariable=newDepartment, bg="darkgray")
        newEmployeeButton = Button(newEmployeeFrame, text="Create")
        newEmployeeButton.bind("<Button-1>", newEmployee)
        master.bind("<Return>", newEmployee)
        newEmployeeLabel.grid(row=0, columnspan=2, pady=5)
        newFirstNameLabel.grid(row=1, sticky=E)
        newLastNameLabel.grid(row=2, sticky=E)
        newFirstNameEntry.grid(row=1, column=1)
        newLastNameEntry.grid(row=2, column=1)
        newTitleLabel.grid(row=3, sticky=E)
        newDepartmentLabel.grid(row=4, sticky=E)
        newTitleEntry.grid(row=3, column=1)
        newDepartmentEntry.grid(row=4, column=1)
        newEmployeeButton.grid(row=7, columnspan=2, pady=10)

    #FINISHED, DO NOT TOUCH
    def newOrderScreen(master):
        def Return(event):
            time.sleep(.3)
            cursor.execute("DELETE FROM Prod_Cart")
            connection.commit()
            i = 0
            PaintsMain.currentPayment = 0
            paymentFrame.destroy()
            PaintsMain.menuScreen(master)

        def removeFromCart(event):
            search = cart.get(cart.curselection())
            mylist = str(search).split("'")
            print(mylist)
            checker = mylist[1]
            print(checker)
            price = cursor.execute('SELECT Prod_Price FROM Product WHERE Prod_SKU = "' + str(checker) + '"').fetchall()
            qty = cursor.execute('SELECT Qty FROM Prod_Cart WHERE Prod_SKU = "' + str(checker) + '"').fetchall()
            productList.insert(0, search)
            cart.delete((cart.curselection())[0])
            prodPrice = int(price[0][0]) * int(qty[0][0])
            PaintsMain.currentPayment = PaintsMain.currentPayment - prodPrice
            v.set(PaintsMain.currentPayment)
            cursor.execute('DELETE FROM Prod_Cart WHERE Prod_SKU ="' + str(checker) + '"')
            connection.commit()

        def addToCart(event):
            search=productList.get(productList.curselection())
            mylist = str(search).split("'")
            print(mylist)
            checker = mylist[1]
            print(checker)
            price=cursor.execute('SELECT Prod_Price FROM Product WHERE Prod_SKU = "' + str(checker) + '"').fetchall()
            qty=int(qtyEntry.get())
            if isinstance( qty, int):
                cart.insert(0, search)
                productList.delete((productList.curselection())[0])
                prodPrice=int(price[0][0])*int(qty)
                print(prodPrice)
                PaintsMain.currentPayment=PaintsMain.currentPayment+prodPrice
                v.set(PaintsMain.currentPayment)
                cursor.execute('INSERT INTO Prod_Cart (Prod_SKU, Qty) VALUES ("' + checker + '", "' + str(qty) + '")')
                connection.commit()

        def makePayment(event):
            answer = tkinter.messagebox.askquestion('Click Yes to Proceed','Confirm order')
            if answer=='no':
                return
            pList = cursor.execute('SELECT Prod_SKU FROM Prod_Cart').fetchall()
            i = 0
            print(pList)
            #pList.__sizeof__()
            Invoice_ID=len(cursor.execute('SELECT Inv_Number FROM Invoice').fetchall())
            Invoice_ID=int(Invoice_ID)+1
            Line_Num=0
            print("Invoice_ID")
            print(Invoice_ID)
            while i < len(pList):
                skuList=pList
                sku=str(skuList[i])
                sku = str(skuList[i]).split("'")
                print("SKU")
                print(sku)
                print("SKU")
                print(sku[1])
                qty=cursor.execute('SELECT Qty FROM Prod_Cart WHERE Prod_SKU="'+ str(sku[1]) + '"').fetchone()
                print(str(qty))
                print(str(qty).split("(")[1].split(",)"))
                print(str(qty).split("(")[1].split(",)")[0])
                qty=str(qty).split("(")[1].split(",)")[0]
                size=cursor.execute('SELECT Prod_SKU FROM Line')
                cursor.execute('INSERT INTO Line (Inv_Number, Line_Number, Prod_SKU, Line_Quantity) VALUES ("' + str(Invoice_ID) + '", "' + str(Line_Num) + '", "' + str(sku[1]) + '", "' + str(qty) + '")')
                i = i + 1
                Line_Num=Line_Num+1
                connection.commit()
            PaintsMain.currentPayment = 0
            cursor.execute('DELETE FROM Prod_Cart')
            connection.commit()
            PaintsMain.currentPayment = 0
            cursor.execute('INSERT INTO Invoice (Inv_Number, Cust_Code, Inv_Date, Inv_Total, Inv_Terms, Pay_Made, Emp_Number) VALUES ("' + str(Invoice_ID) + '", "' + str(PaintsMain.currentCustomer) + '", "' + str(datetime.datetime.today().strftime('%Y-%m-%d')) + '", "' + str(PaintsMain.currentPayment) + '", "Norm", "False" , "' + str(PaintsMain.currentEmployee) + '")')
            connection.commit()
            tkinter.messagebox.showinfo('Order made!', 'Order made, Return to menu')
            Return(master)

        def getInvoiceNum():
            check_InvNum=cursor.execute('SELECT Inv_Number FROM Invoice')
            i=0
            j=0
            while i != check_InvNum.arraysize:
                j = j + 1
                if j == check_InvNum.fetchone():
                    check_InvNum = cursor.execute('SELECT Inv_Number FROM Invoice')
                    i=0
                return j

        master.geometry("500x700")
        paymentFrame = Frame(master, highlightbackground="red", highlightcolor="red",highlightthickness=1, width=500, height=500)
        paymentFrame.pack()
        cBalanceLabel = Label(paymentFrame, text="Balance: ")
        cartLabel= Label(paymentFrame, text="Cart:")
        qtyLabel = Label(paymentFrame, text ="Qty:")
        qty=0
        qtyEntry = Entry(paymentFrame, textvariable=qty, width=10, bg="darkgray")
        currentBalance = StringVar()
        queryLabel = Label(paymentFrame, text="Search")
        productList = Listbox(paymentFrame, bg="darkgray")
        pList=cursor.execute('SELECT * FROM Product')
        i=0
        pList.__sizeof__()
        while i<pList.__sizeof__():
            productList.insert(int(i),pList.fetchone())
            i=i+1
        cart = Listbox(paymentFrame, bg="darkgray")
        productList.grid(row=1, sticky=W)
        cartLabel.grid(row=4, sticky=W)
        cart.grid(row=5, sticky=W)
        cBalance = Label(paymentFrame, textvariable=currentBalance)
        payment = StringVar()
        paymentEntry = Entry(paymentFrame, textvariable=payment, width=10, bg="darkgray")
        paymentDateLabel = Label(paymentFrame, text="Payment Date:")
        currentDate = datetime.datetime.today().strftime('%Y-%m-%d')
        paymentDate = Label(paymentFrame, text=str(currentDate))
        addToCartButton = Button(paymentFrame, text="Add to cart", bg="gray")
        addToCartButton.bind("<Button-1>", addToCart)
        removeFromCartButton = Button(paymentFrame, text="Remove", bg="gray")
        removeFromCartButton.bind("<Button-1>", removeFromCart)
        master.bind("<Return>", removeFromCart)
        makePaymentButton = Button(paymentFrame, text="Make Payment", bg="gray")
        makePaymentButton.bind("<Button-1>", makePayment)
        master.bind("<Return>", makePayment)
        paymentLabel = Label(paymentFrame, text="Payment: ")
        PaintsMain.total=0
        v=StringVar()
        v.set(PaintsMain.currentPayment)
        paymentTotalLabel = Label(paymentFrame, textvariable=v, bg="gray")
        addToCartButton.grid(row=3, sticky=W)
        removeFromCartButton.grid(row=3, sticky=E)
        qtyLabel.grid(row=2, sticky=W)
        qtyEntry.grid(row=2, sticky=E)
        cBalanceLabel.grid(row=6, sticky=W)
        cBalance.grid(row=7, sticky=E)
        paymentLabel.grid(row=8, sticky=W)
        paymentTotalLabel.grid(row=9, sticky=E)
        paymentDateLabel.grid(row=10, sticky=W)
        paymentDate.grid(row=11, sticky=E)
        queryLabel.grid(row=0, sticky=W)
        makePaymentButton.grid(row=12, padx=5, pady=15)
        returnButton = Button(paymentFrame, text="Return")
        returnButton.bind("<Button-1>", Return)
        returnButton.grid(row=13, column=1)

    #NOT FINISHED
    def lookupInvoiceScreen(master):

        def Return(event):
            time.sleep(.3)
            lookupInvoiceFrame.destroy()
            PaintsMain.menuScreen(master)

        master.bind("<Escape>", Return)

        def searchInvoice(event):
            idValue = str(invoiceID.get())
            if(idValue == ""):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You must fill the required fields!')
            else:
                if (idValue != ""):
                    cursor.execute('SELECT * FROM Invoice WHERE Inv_Number = "' + idValue + '"')
                    result = cursor.fetchall()
                    if (str(result) == "[]"):
                        tkinter.messagebox.showerror('Incorrect ID', 'Attention, The invoice you\'ve entered was not found!')
                    else:
                        generateInvoice(result)

        def generateInvoice(r):
            currentInvoice = Tk()
            currentInvoice.title('Invoice ' + str(r[0][0]))
            currentInvoiceFrame = Frame(currentInvoice, bg="gray")
            currentInvoiceFrame.pack(fill=BOTH, expand=YES)
            #invLabel = Label(currentInvoiceFrame, text="Inv #: " + str(r[0][0]), bg="gray", highlightbackground="red", highlightcolor="red", highlightthickness=1)
            custLabel = Label(currentInvoiceFrame, text="Cust Code: " + str(r[0][1]), bg="gray", highlightbackground="red", highlightcolor="red", highlightthickness=1)
            empLabel = Label(currentInvoiceFrame, text="Emp #: " + str(r[0][6]), bg="gray", highlightbackground="red", highlightcolor="red", highlightthickness=1)
            totalLabel = Label(currentInvoiceFrame, text="Total: $" + str(r[0][3]), bg="gray", highlightbackground="red", highlightcolor="red", highlightthickness=1)
            #invLabel.grid(row=0, column=0)
            custLabel.grid(row=0, column=0)
            empLabel.grid(row=0, column=1)
            totalLabel.grid(row=0, column=2)
            cursor.execute('SELECT COUNT(*) FROM Line WHERE Inv_Number = "' + str(r[0][0]) + '"')
            rownum = cursor.fetchall()
            iList = cursor.execute('SELECT * FROM Line WHERE Inv_Number = "' + str(r[0][0]) + '"')
            lineList = Listbox(currentInvoiceFrame, height=rownum, bg="darkgray")
            i = 0
            while i < iList.__sizeof__():
                curr = iList.fetchone()
                if(curr != None):
                    lineList.insert(int(i), "{:<20}{:<5}".format(str(curr[2]), "x" + str(curr[3])))
                i = i + 1

            lineList.grid(row=1, columnspan=3, pady=5)
            currentInvoice.mainloop()

        lookupInvoiceFrame = Frame(master, width=300, height=200, bg="gray")
        lookupInvoiceFrame.pack(pady=25)
        lookupInvoiceFrame.pack_propagate(0)
        lookupLabel = Label(lookupInvoiceFrame, text="Lookup an invoice by invoice number:", bg="gray")
        invoiceIdLabel = Label(lookupInvoiceFrame, text="Invoice Number:", bg="gray")
        invoiceID = StringVar()
        invoiceIdEntry = Entry(lookupInvoiceFrame, textvariable=invoiceID, bg="darkgray")
        searchButton = Button(lookupInvoiceFrame, text="Search")
        searchButton.bind("<Button-1>", searchInvoice)
        master.bind("<Return>", searchInvoice)
        lookupLabel.grid(row=0, columnspan=2, pady=10)
        invoiceIdLabel.grid(row=1, sticky=E)
        invoiceIdEntry.grid(row=1, column=1)
        searchButton.grid(row=2, columnspan=2, pady=10)

#Creating window and calling PaintsMain class which initialized login window
root = Tk()
root.title('Paints R Us')
root.geometry("300x200")
root.config(background="gray")
b = PaintsMain(root)
root.mainloop()